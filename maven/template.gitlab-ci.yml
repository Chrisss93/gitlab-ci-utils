include:
  - project: chrisss93/ci
    file: docker.gitlab-ci.yml

variables:
  JDK_VERSION: 17
  JOB_IMAGE: maven:3.9-eclipse-temurin-$JDK_VERSION-alpine
  FF_USE_NEW_BASH_EVAL_STRATEGY: "true"
  MAVEN_ARGS: -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository

default:
  image: $JOB_IMAGE
  cache:
    - key: $CI_PROJECT_PATH-maven-repository
      paths:
        - $CI_PROJECT_DIR/.m2/repository
      when: always
      unprotect: true
    - key: $CI_PROJECT_PATH-bins
      paths:
        - $CI_PROJECT_DIR/.pipeline-bins

stages:
  - check
  - test
  - build
  - deploy

setup:
  stage: .pre
  script:
    - mvn help:effective-pom -Doutput=full-pom.xml
    - &install-yq |-
      mkdir -p .pipeline-bins
      export PATH=$(pwd)/.pipeline-bins:$PATH
      which yq || (
        curl -L https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64.tar.gz | tar xzv && \
        mv yq_linux_amd64 .pipeline-bins/yq
      )
  artifacts:
    paths:
      - full-pom.xml

pmd:
  stage: check
  variables:
    PLUGIN: maven-pmd-plugin
    GOAL: pmd:check
    REPORT: target/pmd.xml
    PLUGIN_EXISTS: (.project.build.plugins.plugin[] | select(.artifactId == "$PLUGIN"))
    PLUGIN_CONFIG: '{"failOnViolation": "false", "printFailingErrors": "true", "targetDirectory": "target"}'
    YQ_EXPR: >-
      .pmd.file | map( .+@name as $$name | [.violation] | flatten | map(.name |= $$name) ) | flatten | map({
      "check_name": "PMD \(.+@ruleset): \(.+@rule)", "description": .+content, "type": "issue",
      "location": { "path": .name, "lines": { "begin": .+@beginline, "end": .+@endline } },
      "fingerprint": (.+content | @base64),
      "severity": ( .+@priority | (
      with(select(. == "1"); . |= "blocker") |
      with(select(. == "2"); . |= "critical") |
      with(select(. == "3"); . |= "major") |
      with(select(. == "4"); . |= "minor") |
      with(select(. == "5"); . |= "info")
      )),
      "type": "issue", "categories": ["Clarity"]
      })
    ISSUES_EXPR: . | length > 0
  script:
    - *install-yq
    - >-
      yq -p xml -eoy "$PLUGIN_EXISTS" full-pom.xml || (
        echo "$PLUGIN is not configured for this project. Consider adding it or disabling this job." && exit 222
      )
    - yq -p xml -o xml -i "${PLUGIN_EXISTS}.configuration |= . * $PLUGIN_CONFIG" full-pom.xml
    - mvn -f full-pom.xml $GOAL $EXTRA_OPTS
    - yq -p ${REPORT##*.} -o ${ARTIFACT_EXT:-json} "$YQ_EXPR" $REPORT > report.json
    - if [ -s report.json ]; then yq -eoy "$ISSUES_EXPR" report.json && exit 222 || true; fi
  artifacts:
    paths:
      - target/site
      - $REPORT
    reports:
      codequality: report.json
  allow_failure:
    exit_codes: 222

# Perhaps makes more sense to convert this to a SAST report for Ultimate users instead of codequality?
spotbugs:
  extends: pmd
  stage: check
  variables:
    PLUGIN: spotbugs-maven-plugin
    GOAL: test-compile spotbugs:check
    REPORT: target/spotbugsXml.xml
    PLUGIN_CONFIG: >- 
      {"spotbugsXmlOutputFilename": "spotbugsXml.xml", "spotbugsXmlOutputDirectory": "target", "htmlOutput": "true",
      "failOnError": "false"}
    YQ_EXPR: >-
      .BugCollection.BugInstance | map( . as $$bug | [.SourceLine] | flatten | filter(.+@primary).[0] | {
      "check_name": "SpotBugs \($$bug.+@category): \($$bug.+@type)", "description": $$bug.ShortMessage,
      "location": { "path": .+@sourcepath, "lines": { "begin": .+@start, "end": .+@end } },
      "fingerprint": $$bug.+@instanceHash,
      "severity": ( $$bug.+@priority | (
      with(select(. == "1"); . |= "blocker") |
      with(select(. == "2"); . |= "major") |
      with(select(. == "3"); . |= "minor")
      )),
      "type": "issue", "categories": ["BugRisk", "Security"]
      })
  after_script:
    - >-
      if [ -f "target/spotbugs.html" ]; then
      mkdir -p target/site && mv target/spotbugs.html target/site
      ; fi


checkstyle:
  extends: pmd
  variables:
    PLUGIN: maven-checkstyle-plugin
    GOAL: checkstyle:checkstyle
    REPORT: target/checkstyle.xml
    PLUGIN_CONFIG: >-
      {"outputFile": "target/checkstyle-result.xml", "outputFileFormat": "xml", "logViolationsToConsole": "true",
      "logViolationCountToConsole": "true", "failsOnError": "false", "failOnViolation": "false", "consoleOutput": true,
      "cacheFile": "target/checkstyle-cachefile"}
    YQ_EXPR: >-
      .checkstyle.file | map( .+@name as $$name | .error | map(.name |= $$name) ) | flatten | map({
      "check_name": "Checkstyle", "description": .+@message,
      "location": { "path": .name, "lines": { "begin": .+@line, "end": .+@line } },
      "fingerprint": (.+@line + .+@column + .name | @base64),
      "severity": "minor", "type": "issue", "categories": ["Style"]
      })


oss-index:
  extends: pmd
  variables:
    PLUGIN: ossindex-maven-plugin
    GOAL: ossindex:audit
    REPORT: target/ossindex-report.json
    PLUGIN_CONFIG: '{"reportFile": "target/ossindex-report.json", "fail": "false"}'
    SCAN: >-
      {"id": "oss-index", "name": "oss-index", "version": "3.2.0", "vendor": {"name": "Sonatype OSS Index"},
      "url": "https://ossindex.sonatype.org"}
    PKG_REGEX: pkg:maven/(?P<p>.+)@(?P<v>.+)
    JSON_SCHEMA: https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/raw/v15.0.6/dist/dependency-scanning-report-format.json?ref_type=tags
    YQ_EXPR: >-
      {"version": "15.0.6", "schema": "$JSON_SCHEMA", "scan": {"type": "dependency_scanning", "status": "success",
      "analyzer": $SCAN, "scanner": $SCAN, "start_time": "$CI_JOB_STARTED_AT", "end_time": (now | tz("UTC"))},
      "vulnerabilities": .reports | filter(.vulnerabilities // [] | length > 0) |
      map(.coordinates as $$pkg | .vulnerabilities | map(.pkg |= $$pkg)) | flatten | map({
      "id": .id, "name": .title, "description": .description, "severity": "Medium",
      "identifiers": [{ "type": "cve", "value": .cve, "name": .title, "url": .reference}],
      "location": ( .pkg | capture("$PKG_REGEX") | {"dependency": {"version": .v, "package": {"name": .p}}} )
      })
      }
    ISSUES_EXPR: .vulnerabilities | length > 0
  artifacts:
    reports:
      codequality: []
      dependency_scanning: report.json


# If pipeline is not running in main branch or on git tag, the integration-tests job should ONLY run integration-tests
# In order to do that, if the pom.xml is using the failsafe plugin for integration tests, during the integration-test
# job, set the surefire plugin configuration property SkipTests to true. So when the maven integration-test phase
# is run, no surefire tests should be executed during dependent maven test phase
#
# If the pom.xml is not using the failsafe plugin, but instead relying entirely on surefire for both types of tests,
# add an execution block in the plugin targeting the maven test phase, and then set the configuration property
# SkipTests to true. Merge that property if such an execution block targeting the maven test phase already exists.

unit-tests:
  stage: test
  variables:
    JACOCO_CONFIG: >-
      with(.project.build.plugins.plugin[];
      with(select(.artifactId == "jacoco-maven-plugin");
      .executions.execution |= . // [{"id": "tmp-$CI_JOB_NAME", "goals": {"goal": "prepare-agent"}}] |
      .executions.execution[] |
      with(select([.goals.goal] | flatten | .[] |
      (contains("prepare-agent") or contains("prepare-agent-integration")));
      .configuration |= . * {"destFile": "target/jacoco/$CI_JOB_NAME.exec"}
      )
      ))
  script:
    - *install-yq
    - yq -p xml -o xml -i "$JACOCO_CONFIG" full-pom.xml
    - mvn -f full-pom.xml test $TEST_OPTS
  artifacts:
    when: always
    paths:
      - target/jacoco
    reports:
      junit: target/**/TEST-*.xml


integration-tests:
  extends: unit-tests
  variables:
    SUREFIRE_CONFIG: >-
      with(.project.build.plugins.plugin[];
      with(select(.artifactId == "maven-surefire-plugin");
      .executions.execution |= . // [{"phase": "test", "id": "tmp-$CI_JOB_NAME", "goals": {"goal": "test"}}] |
      .executions.execution[] | with(select(.phase == "test"); .configuration |= . * {"skipTests": "true"})
      ))
  script:
    - *install-yq
    - yq -p xml -o xml -i "$JACOCO_CONFIG" full-pom.xml
    # Disable surefire tests during the maven test phase so the maven integration-test phase doesn't re-run
    # tests from the unit-test job
    - yq -p xml -o xml -i "$SUREFIRE_CONFIG" full-pom.xml
    - mvn -f full-pom.xml integration-test $TEST_OPTS
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: manual

# This is especially silly that we must transform a popular coverage tooling format (jacoco) into a dead, barely
# documented format (cobertura).  But gitlab does not yet support jacoco coverage format.
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/227345
# TODO:
#  * The PMD job (and all extensions) suffer from the issue that we change the plugin config, but if the pom.xml
#    for that plugin specifies specific configuration in individual execution blocks, our config will be ignored.
#    We can instead target the plugin config to specific execution blocks, but this means adding another parameter to
#    know which goal to create/update the execution configuration for.

coverage:
  extends: pmd
  stage: build
  variables:
    PLUGIN: jacoco-maven-plugin
    GOAL: jacoco:merge compile jacoco:report
    REPORT: target/site/jacoco/jacoco.xml
    PLUGIN_CONFIG: >-
      {"dataFile": "target/jacoco.exec", "formats": "HTML,XML", "outputDirectory": "target/site/jacoco",
      "fileSets": {"fileSet": {"directory": "target/jacoco", "include": "*.exec"}} 
      }
    ARTIFACT_EXT: xml
    ISSUES_EXPR: false
    ATTRS: >-
      "+@line-rate": .counter | filter(.+@type == "LINE") | .[] |
        (.+@covered | to_number) / ((.+@missed | to_number) + (.+@covered | to_number)),
      "+@branch-rate": .counter | filter(.+@type == "BRANCH") | (.[] // {"+@covered": 1, "+@missed": 0})  |
        (.+@covered | to_number) / ((.+@missed | to_number) + (.+@covered | to_number)),
      "+@complexity": .counter | filter(.+@type == "COMPLEXITY") | .[] |
        (.+@covered | to_number) + (.+@missed | to_number),
    YQ_EXPR: >- 
      { "+p_xml": .+p_xml,
        "+directive": "DOCTYPE coverage SYSTEM \"http://cobertura.sourceforge.net/xml/coverage-04.dtd\"",
        "coverage": .report | { $ATTRS
        "+@timestamp": [.sessioninfo] | flatten | map(.+@start | to_number) | max,
        "sources": { "source": ["${CI_PROJECT_DIR}/src/main/java"] },
        "packages": { "package": .package | map(
          ([.sourcefile] | flatten | filter(has("line"))) as $src |
          ([.class] | flatten | filter(has("method"))) as $class | { $ATTRS
          "+@name": .+@name | sub("/", "."),
          "classes": { "class": $class | map( .+@sourcefilename as $name | { $ATTRS
            "+@name": .+@name | sub("/", "."),
            "+@filename": (.+@name | sub("(.+/).*", "${1}")) + $name,
            "methods": { "method": [.method] | flatten | map(
              (.+@line | to_number) as $line |
              ($class | filter(.+@sourcefilename == $name) |
                map([.method]) | flatten |
                map(.+@line | to_number) | filter(. > $line) | min) as $nextMethodLine | { $ATTRS
              "+@name": .+@name, "+@signature": .+@desc,
              "lines": { "line":
                $src | filter(.+@name == $name) | [.[].line] | flatten | map(.+@nr |= to_number) |
                filter( .+@nr >= $line and (.+@nr < $nextMethodLine or $nextMethodLine == null) ) |
                map({
                  "+@number": .+@nr,
                  "+@hits": .+@ci | to_number | with(select(. > 0); 1) | with(select(. == 0); 0),
                  "+@branch": ((.+@mb | to_number) + (.+@cb | to_number) > 0)
                })
              }
            })
            }
          })
          }
        })
        }}
      }
  after_script:
    - >-
      if [ -f "target/jacoco/jacoco.xml" ]; then
      yq '.report.counter[] | select(.+@type == "BRANCH") |
      100 * (.+@covered | to_number) / (.+@covered | to_number) + (.+@missed | to_number) |
      "\(.)" |  sub("(\d+(\.\d{1,2})?).*", "Branch Coverage: ${1}%")' target/jacoco/jacoco.xml
      ; fi
  coverage: '/^Branch Coverage: (\d+\.?\d+%)$/'
  artifacts:
    reports:
      codequality: []
      coverage_report:
        coverage_format: cobertura
        path: report.json


site:
  stage: build
  variables:
    REPORTS: >-
      dependencies dependency-convergence dependency-info dependency-management
      distribution-management licenses plugins summary
    REPORT_PLUGINS: >-
      [
        {
          "groupId": "org.apache.maven.plugins",
          "artifactId": "maven-project-info-reports-plugin",
          "version": "3.5.0",
          "reportSets": {"reportSet": [ {"reports": . | split(" ") | {"report": .}} ]}
        },
        {
          "groupId": "org.apache.maven.plugins",
          "artifactId": "maven-javadoc-plugin",
          "version": "3.7.0",
          "reportSets": {"reportSet": [ {"reports": {"report": ["javadoc", "test-javadoc"]}} ]}
        },
        {
          "groupId": "org.apache.maven.plugins",
          "artifactId": "maven-surefire-report-plugin",
          "version": "3.2.5",
          "configuration": {"skipSurefireReport": true},
          "reportSets": {"reportSet": [ {"reports": [{"report": "report-only"}]} ]}
        }
      ]
    SITE_PLUGIN: (.project.build.plugins.plugin[] | select(.artifactId == "maven-site-plugin"))
    SITE_DEPS: '{"groupId": "org.sentrysoftware.maven", "artifactId": "maven-skin-tools", "version": "1.3.00"}'
  script:
    - *install-yq
    - |-
      if [ ! -d "src/site" ]; then
        echo "Making custom maven site"

        yq -p xml -o xml -i "${SITE_PLUGIN}.dependencies.dependency |= [. // []] + $SITE_DEPS" full-pom.xml
        plugins=$(echo "$REPORTS" | yq -o json "$REPORT_PLUGINS")
        yq -p xml -o xml -i ".project.reporting.plugins.plugin = $plugins" full-pom.xml
        mvn -f full-pom.xml surefire-report:report-only # Run in advance due to SUREFIRE-616

        # Get a pre-prepared site descriptor from CI pipeline repo
        curl -vv -L -H 'JOB-TOKEN: $CI_JOB_TOKEN' $CI_API_V4_URL/projects/chrisss93%2Fci/repository/archive?path=maven/site&sha=fix > thing.tar.gz
        ls -alh
        curl -L -H 'JOB-TOKEN: $CI_JOB_TOKEN' \
        $CI_API_V4_URL/projects/chrisss93%2Fci/repository/archive?path=maven/site&sha=fix | \
        tar xzv -C src --strip-components 2

        site_links=$(echo "$LINKS" | yq -o json '. | map({"+@name": .name, "+@href": .href})')
        yq -p xml -o xml -i ".project.body.links.item |= [. // []] + $site_links" src/site/site.xml
        ln -s ../../../README.md src/site/markdown/README.md
      fi
    - mvn -f full-pom.xml site:site $SITE_OPTS
  artifacts:
    paths:
      - target/site


deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    SETTINGS_GITLAB_SERVER: >-
      {"id": "pipeline-gitlab-maven",
      "configuration": {"httpHeaders": {"property": {"name": "Job-Token", "value": "$CI_JOB_TOKEN"}}}
      }
    POM_GITLAB_URL: '{"id": "pipeline-gitlab-maven", "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/maven"}'
    DISABLE_PLUGINS: >-
      with(.project.build.plugins.plugin[];
      select(.artifactId as $$a | [
        "maven-pmd-plugin", "spotbugs-maven-plugin", "maven-checkstyle-plugin", "ossindex-maven-plugin", 
        "jacoco-maven-plugin", "maven-surefire-plugin", "maven-failsafe-plugin"] |
        any_c(. == $$a)) |
      .configuration.skip = true)
  script:
    - *install-yq
    # Add gitlab maven repository
    - touch settings.xml
    - yq -i -p xml -o xml ".settings.servers.server |= [. // []] + $SETTINGS_GITLAB_SERVER" settings.xml
    - >-
      yq -i -p xml -o xml "with(.project.distributionManagement;
      (.repository, .snapshotRepository) |= [. //[]] + $POM_GITLAB_URL
      )" full-pom.xml
    # Disable any plugins from earlier phases
    - yq -i -p xml -o xml "$DISABLE_PLUGINS" full-pom.xml
    - mvn -f full-pom.xml -s settings.xml deploy


pages:
  stage: .post
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    CYCLONE_PLUGIN: '{"groupId": "org.cyclonedx", "artifactId": "cyclonedx-maven-plugin", "version": "2.8.0"}'
  script:
    - *install-yq
    - >-
      grep 'cyclonedx-maven-plugin' full-pom.xml ||
      yq -p xml -o xml -i ".project.build.plugins.plugin |= [. // []] + $CYCLONE_PLUGIN" full-pom.xml
    - >-
      mvn -f full-pom.xml cyclonedx:makeAggregateBom
      -DoutputFormat=json -DoutputDirectory=target -DoutputName=bom || true
    - mv target/site public
    - |-
      if [ ! -f "public/index.html" ]; then
      if [ -f "public/summary.html" ]; then cp public/summary.html public/index.html
      elif [-f "public/README.html" ]; then cp public/README.html public/index.html
      fi
      fi
    - >-
      if [ -f "public/jacoco/jacoco.xml" ]; then mv public/jacoco/jacoco.xml target && printf '{
        "name": "Test Coverage",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/jacoco.xml"
      }\n' >> assets.json
      ; fi
    - >- 
      if [ -f "target/ossindex-report.json" ]; then printf '{
        "name": "Dependency Vulnerability Report",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/ossindex-report.json"
      }\n' >> assets.json
      ; fi
    - >- 
      if [ -f "target/pmd.xml" ]; then printf '{
        "name": "Source Code Analysis",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/pmd.xml"
      }\n' >> assets.json
      ; fi
    - >- 
      if [ -f "target/spotbugsXml.xml" ]; then printf '{
        "name": "Byte Code Analysis",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/spotbugsXml.xml"
      }\n' >> assets.json
      ; fi
    - >- 
      if [ -f "target/checkstyle.xml" ]; then printf '{
        "name": "Code Lint",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/checkstyle.xml"
      }\n' >> assets.json
      ; fi
    - >-
      if [ -f "target/bom.json" ]; then printf '{
        "name": "Software Bill of Materials",
        "url": "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/target/bom.json"
      }\n' >> assets.json
      ; fi
    - >-
      tag=${CI_COMMIT_TAG#v} yq eval-all '[.] | {
        "name": env(tag),
        "tag_name": "$CI_COMMIT_TAG",
        "description": "Triggered by git tag: $CI_COMMIT_TAG - $CI_COMMIT_TAG_MESSAGE",
        "assets": {"links": .}
      }' assets.json > release.json
    - yq release.json
    - >-
      curl -L -X POST -H 'JOB-TOKEN: $CI_JOB_TOKEN' -H 'Content-Type:application/json'
      -d @release.json
      $CI_API_V4_URL/projects/$CI_PROJECT_ID/releases
  artifacts:
    paths:
      - target/*.{xml,json}
